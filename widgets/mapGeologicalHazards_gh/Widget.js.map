{"version":3,"sources":["../../../widgets/mapGeologicalHazards_gh/Widget.js"],"names":["declare","BaseWidget","_WidgetsInTemplateMixin","Draw","Graphic","SimpleMarkerSymbol","SimpleLineSymbol","SimpleFillSymbol","Color","GraphicsLayer","sniff","esriRequest","scaleUtils","portalUtils","arrayUtils","InfoTemplate","FeatureLayer","dom","SimpleRenderer","DataFile","Geoprocessor","idGraphicFilterGh","idFeatureLayerGh","symbolPolygonGh","STYLE_SOLID","STYLE_DASH","baseClass","portalUrl","uploadServiceUrl","itemIDLoad","map_type_selected","stakeHolder","json_graphic","zip_graphic","jobId","postCreate","inherited","arguments","console","log","self_gh","getPortal","appConfig","_createToolbar","toolbarGh","map","on","_addToMap","evt","deactivate","area","geometry","graphic","graphicLayer","id","add","addLayer","setExtent","_extent","setInfoWindowOnClick","_activateTool","_removeAllGrapics","tool","value","toUpperCase","activate","graphicsLayerIds","includes","removeLayer","getLayer","byId","_progressBarStatus","show","containerProgressBarGhAp","classList","toggle","remove","_errorContainerStatus","containerErrorGhAp","_dissabledButon","disabled","dojo","_showTextError","err","innerHTML","_uploadShapefile","fileName","target","toLowerCase","arr","split","length","endsWith","_getDataFromShapefileZip","message","name","replace","messageLoaded","containerMessagesProgressGhAp","params","spatialReference","extent","getExtentForScale","resolution","getWidth","width","generalize","maxAllowableOffset","reducePrecision","numberOfDigitsAfterDecimal","content","JSON","stringify","url","form","handleAs","callbackParamName","load","response","error","_addShapefileToMap","featureCollection","config","f","then","_setLoadItemID","_uploadFailed","responseUpload","itemID","fullExtent","layers","featureSet","geometryType","forEach","layer","infoTemplate","featureLayer","event","infoWindow","setFeatures","setRenderer","union","push","addLayers","expand","_checkRadioButton","itTitleMapGhAp","parentElement","querySelector","_selectedStakeholder","selectedOptions","_executeGPService","dataFile","gp","mapaPeligrosGeologicosGPService","submitJob","_completeCallback","_statusCallback","JobInfo","textMessage","messages","description","join","jobStatus","getResultData","result","a","document","createElement","href","download","click","_cancelProcess","cancelJob","info","onOpen","query","selectStakeholderGhAp","panel","getPanel","position","height","setPosition","panelManager","normalizePanel"],"mappings":"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","file":"Widget.js","sourcesContent":["import declare from 'dojo/_base/declare';\r\nimport BaseWidget from 'jimu/BaseWidget';\r\nimport _WidgetsInTemplateMixin from 'dijit/_WidgetsInTemplateMixin';\r\nimport Draw from \"esri/toolbars/draw\";\r\nimport Graphic from \"esri/graphic\";\r\nimport SimpleMarkerSymbol from \"esri/symbols/SimpleMarkerSymbol\";\r\nimport SimpleLineSymbol from \"esri/symbols/SimpleLineSymbol\";\r\nimport SimpleFillSymbol from \"esri/symbols/SimpleFillSymbol\";\r\nimport Color from 'dojo/_base/Color';\r\nimport GraphicsLayer from \"esri/layers/GraphicsLayer\"\r\nimport sniff from \"dojo/sniff\";\r\nimport esriRequest from \"esri/request\";\r\nimport scaleUtils from \"esri/geometry/scaleUtils\";\r\nimport portalUtils from \"jimu/portalUtils\";\r\nimport arrayUtils from \"dojo/_base/array\";\r\nimport InfoTemplate from \"esri/InfoTemplate\";\r\nimport FeatureLayer from\"esri/layers/FeatureLayer\";\r\nimport dom from \"dojo/dom\";\r\nimport SimpleRenderer from \"esri/renderers/SimpleRenderer\";\r\nimport DataFile from \"esri/tasks/DataFile\";\r\nimport Geoprocessor from \"esri/tasks/Geoprocessor\";\r\n\r\n\r\nconst idGraphicFilterGh = \"graphicFilterGh\"\r\nconst idFeatureLayerGh = \"featureLayerGh\"\r\n\r\nconst symbolPolygonGh = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID,\r\n  new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH,\r\n    new Color([255, 0, 0]), 2), new Color([255, 255, 255, 0.1])\r\n);\r\n\r\n// To create a widget, you need to derive from BaseWidget.\r\nexport default declare([BaseWidget, _WidgetsInTemplateMixin], {\r\n\r\n  // Custom widget code goes here\r\n\r\n  baseClass: 'map-geological-hazards-gh',\r\n  portalUrl: null,\r\n  uploadServiceUrl: `${portalUrl}/sharing/rest/content/features/generate`,\r\n  itemIDLoad: null,\r\n  map_type_selected: null,\r\n  stakeHolder: null,\r\n  json_graphic: null,\r\n  zip_graphic: null,\r\n  jobId: null,\r\n\r\n  // add additional properties here\r\n\r\n  // methods to communication with app container:\r\n  postCreate () {\r\n    this.inherited(arguments);\r\n    console.log('mapGeologicalHazards_gh::postCreate');\r\n    self_gh = this;\r\n    portalUrl = portalUtils.getPortal(self_gh.appConfig.portalUrl).portalUrl\r\n  },\r\n\r\n  _createToolbar() {\r\n    toolbarGh = new Draw(self_gh.map);\r\n    toolbarGh.on(\"draw-end\", self_gh._addToMap);\r\n  },\r\n\r\n  _addToMap(evt) {\r\n    toolbarGh.deactivate();\r\n    let area;\r\n    area = evt.geometry\r\n\r\n    let graphic = new Graphic(area, symbolPolygonGh);\r\n    let graphicLayer = new GraphicsLayer({\r\n      id: idGraphicFilterGh\r\n    });\r\n    graphicLayer.add(graphic);\r\n    self_gh.map.addLayer(graphicLayer);\r\n    self_gh.map.setExtent(graphic._extent, true);\r\n    self_gh.map.setInfoWindowOnClick(true);\r\n    self_gh.json_graphic = graphic.geometry;\r\n  },\r\n\r\n  _activateTool() {\r\n    self_gh.map.setInfoWindowOnClick(false);\r\n    self_gh._removeAllGrapics()\r\n    tool = this.value.toUpperCase();\r\n    toolbarGh.activate(Draw[tool]);\r\n  },\r\n\r\n  _removeAllGrapics(){\r\n    if (self_gh.map.graphicsLayerIds.includes(idGraphicFilterGh)) {\r\n      self_gh.map.removeLayer(self_gh.map.getLayer(idGraphicFilterGh));\r\n    }\r\n    if (self_gh.map.graphicsLayerIds.includes(idFeatureLayerGh)){\r\n      self_gh.map.removeLayer(self_gh.map.getLayer(idFeatureLayerGh));\r\n    }\r\n    dom.byId(\"inputUploadZipGhId\").value = \"\"\r\n    self_gh.json_graphic = null;\r\n    self_gh.zip_graphic = null;\r\n  },\r\n\r\n  _progressBarStatus(show){\r\n    if (show){\r\n      self_gh.containerProgressBarGhAp.classList.toggle('active')\r\n    }else{\r\n      self_gh.containerProgressBarGhAp.classList.remove('active')\r\n    };\r\n  },\r\n\r\n  _errorContainerStatus(show){\r\n    if (show){\r\n      self_gh.containerErrorGhAp.classList.toggle('active')\r\n    }else{\r\n      self_gh.containerErrorGhAp.classList.remove('active')\r\n    }\r\n  },\r\n\r\n  _dissabledButon(disabled){\r\n    dojo.byId(\"btnRunProcessGhId\").disabled = disabled;\r\n    dojo.byId(\"btnCancelProcessGhId\").disabled = !disabled;\r\n  },\r\n\r\n  _showTextError(err){\r\n    self_gh._progressBarStatus(false);\r\n    self_gh.containerErrorGhAp.innerHTML = `<p style=\"color:#F94C66\">${err}</p>`;\r\n    self_gh._errorContainerStatus(true);\r\n    self_gh._dissabledButon(false);\r\n  },\r\n\r\n  _uploadShapefile(evt){\r\n    // self_gh.busyIndicator.show();\r\n    self_gh._progressBarStatus(true);\r\n    self_gh._errorContainerStatus(false)\r\n    // Obtenemos la ruta del archivo shapefile ingresado\r\n    let fileName = evt.target.value.toLowerCase();\r\n\r\n    // si el navegador es internet explorer\r\n    if (sniff(\"ie\")) {\r\n      // Se extrae solo el nombre\r\n      let arr = fileName.split(\"\\\\\");\r\n      fileName = arr[arr.length - 1];\r\n    }\r\n    if (fileName.endsWith('.zip')) {\r\n      // Verificamos que el archivo ingresado tenga la extension .zip\r\n      // Obtenemos los datos del archivo zip\r\n      self_gh._getDataFromShapefileZip(fileName);\r\n    }\r\n    else {\r\n      // Si no es un zip se retorna un mensaje\r\n      let err = {message: \"Debe cargar el archivo shapefile como *.zip\"}\r\n      // self_gh._errorStateLoad(err);\r\n      self_gh._showTextError(err.message)\r\n      // dom.byId('stateLoadId_pa').innerHTML = '<p style=\"color:red\">Debe cargar el archivo shapefile como *.zip</p>';\r\n    }\r\n  },\r\n\r\n  _getDataFromShapefileZip(fileName) {\r\n    // Dividimos el nombre y la extension\r\n    let name = fileName.split(\".\");\r\n\r\n    // reemplazamos el prefijo por una cadena vacia\r\n    name = name[0].replace(\"c:\\\\fakepath\\\\\", \"\");\r\n\r\n    // actualizamos el estado a \"cargando\"\r\n    let messageLoaded = `<p style=\"color:#FFA500\">Cargando ${name} ...</p>`\r\n    self_gh.containerMessagesProgressGhAp.innerHTML = messageLoaded\r\n    // dom.byId('stateLoadId_pa').innerHTML = messageLoaded\r\n\r\n    // creamos el objeto params\r\n    let params = {\r\n      'name': name,\r\n      'targetSR': self_gh.map.spatialReference,\r\n      'maxRecordCount': 1000,\r\n      'enforceInputFileSizeLimit': true,\r\n      'enforceOutputJsonSizeLimit': true\r\n    };\r\n\r\n    let extent = scaleUtils.getExtentForScale(self_gh.map, 40000);\r\n    let resolution = extent.getWidth() / self_gh.map.width;\r\n    params.generalize = true;\r\n    params.maxAllowableOffset = resolution;\r\n    params.reducePrecision = true;\r\n    params.numberOfDigitsAfterDecimal = 0;\r\n\r\n    // Definimos el contenido para ejecutar el servicio de carga\r\n    let content = {\r\n      'filetype': 'shapefile',\r\n      'publishParameters': JSON.stringify(params),\r\n      'f': 'json',\r\n    };\r\n    // Realizamos la peticion al servicio con los parametros\r\n    esriRequest({\r\n      url: self_gh.uploadServiceUrl,\r\n      content: content,\r\n      form: dom.byId('uploadFormGhId'),\r\n      handleAs: 'json',\r\n      callbackParamName: \"callback\",\r\n      load: function(response) {\r\n        if (response.error){\r\n          // Si retorna un error se deriva a la funcion _errorStateLoad\r\n          self_gh._showTextError(response.error);\r\n          return;\r\n        }\r\n        self_gh._addShapefileToMap(response.featureCollection);\r\n      },\r\n      error: self_gh._showTextError\r\n    });\r\n\r\n    // Enviamos el archivo a AGS\r\n    esriRequest({\r\n      url: self_gh.config.uploadServiceUrl,\r\n      form: dom.byId('uploadFormGhId'),\r\n      content: {f: 'json'},  \r\n      handleAs: 'json',\r\n    }).then(self_gh._setLoadItemID, self_gh._uploadFailed)\r\n\r\n  },\r\n  _setLoadItemID(responseUpload){\r\n    self_gh.itemIDLoad = responseUpload[\"item\"].itemID;\r\n  },\r\n  _uploadFailed(response){\r\n    self_gh._showTextError(response);\r\n    self_gh._dissabledButon(false);\r\n    // console.log(\"Failed: \", response);\r\n  },\r\n  _addShapefileToMap(featureCollection) {\r\n    let fullExtent;\r\n    let layers = [];\r\n\r\n    if (featureCollection.layers.length > 0){\r\n      if (featureCollection.layers[0].featureSet.geometryType != 'esriGeometryPolygon'){\r\n        let err = {message: \"El archivo shapefile cargado no es de tipo polígono\"}\r\n        self_gh._showTextError(err)\r\n        return\r\n      }\r\n    }\r\n\r\n    // iteramos el feature ingresado por registro\r\n    arrayUtils.forEach(featureCollection.layers, function (layer) {\r\n      // Configuramos el popup para el registro actual\r\n      let infoTemplate = new InfoTemplate(\"Detalle\", \"${*}\");\r\n\r\n      // Definimos el featurelayer para el registro actual y asociamos el popup\r\n      let featureLayer = new FeatureLayer(layer, {id: idFeatureLayerGh, infoTemplate: infoTemplate});\r\n\r\n      // Agregamos el evento para abrir el popup\r\n      featureLayer.on('click', function (event) {\r\n        self_gh.map.infoWindow.setFeatures([event.graphic]);\r\n      });\r\n      featureLayer.setRenderer(new SimpleRenderer(symbolPolygonGh))\r\n\r\n      // Agregamos el extent de cada uno de los registros\r\n      fullExtent = fullExtent ? fullExtent.union(featureLayer.fullExtent) : featureLayer.fullExtent;\r\n\r\n      // Agregamos el registro al array de layers\r\n      layers.push(featureLayer);\r\n    });\r\n\r\n    // Eliminamos el layer anterior\r\n    self_gh._removeAllGrapics();\r\n\r\n    self_gh.zip_graphic = self_gh.itemIDLoad\r\n\r\n    // Cargamos Layers al mapa (esto lo cargara como una unica entidad)\r\n    self_gh.map.addLayers(layers);\r\n\r\n    // Configuramos la extension de visualizacion con la variable fullExtent\r\n    self_gh.map.setExtent(fullExtent.expand(1.25), true);\r\n    self_gh._progressBarStatus(false);\r\n  },\r\n\r\n  _checkRadioButton(evt){\r\n    self_gh.itTitleMapGhAp.value = evt.target.parentElement.querySelector(`label[for='${evt.target.id}']`).innerHTML\r\n    self_gh.map_type_selected = evt.target.value\r\n  },\r\n\r\n  _selectedStakeholder(evt){\r\n    self_gh.stakeHolder = evt.target.selectedOptions[0].innerHTML\r\n  },\r\n\r\n  _executeGPService(){\r\n    self_gh._dissabledButon(true)\r\n    self_gh._errorContainerStatus(false)\r\n    self_gh._progressBarStatus(true);\r\n\r\n    let dataFile = new DataFile();\r\n    dataFile.itemID = self_gh.zip_graphic;\r\n    let params = {\r\n      \"shapefile\": dataFile,\r\n      \"json\": JSON.stringify(self_gh.json_graphic),\r\n      \"maptype\": self_gh.map_type_selected,\r\n      \"maptitle\": self_gh.itTitleMapGhAp.value,\r\n      \"mapautor\": self_gh.stakeHolder,\r\n      \"mapnumber\": dom.byId(\"itNumberMapGhId\").value,\r\n      \"scale\": '',\r\n\r\n    };\r\n    self_gh.gp = new Geoprocessor(self_gh.config.mapaPeligrosGeologicosGPService);\r\n    self_gh.gp.submitJob(params, self_gh._completeCallback, self_gh._statusCallback);\r\n  },\r\n  _statusCallback(JobInfo) {\r\n    console.log(JobInfo)\r\n    self_gh.jobId = JobInfo.jobId\r\n    let textMessage = JobInfo.messages.map((message) => message.description).join('<br>')\r\n    self_gh.containerMessagesProgressGhAp.innerHTML = textMessage\r\n  },\r\n  _completeCallback(JobInfo) {\r\n    self_gh._dissabledButon(false)\r\n    self_gh._progressBarStatus(false);\r\n    self_gh.containerMessagesProgressGhAp.innerHTML = ''\r\n    if (JobInfo.jobStatus == \"esriJobFailed\") {\r\n      self_gh._showTextError(\"El servicio no se encuentra disponible; por favor intente nuevamente en otro momento\")\r\n      return;\r\n    }\r\n    // } else if (JobInfo.jobStatus == \"esriJobCancelling\" || jobStatus == \"esriJobCancelled\"){\r\n    //   self_gh._dissabledButon(false)\r\n    //   self_gh._progressBarStatus(false);\r\n    //   // self_gh.containerMessagesProgressGhAp.innerHTML = \"Proceso cancelado\";\r\n    // } \r\n    else {\r\n      self_gh.gp.getResultData(JobInfo.jobId, \"response\", function (result) {\r\n        if (!result['value']['status']) {\r\n          self_gh._showTextError(`Ocurrio un problema al procesar la información\\n${result['value']['message']}`)\r\n          return;\r\n        }\r\n        let a = document.createElement('a');\r\n        a.href = result['value']['response']['zip_url'];\r\n        a.download = 'download';\r\n        a.click();\r\n      })\r\n    }\r\n  },\r\n  _cancelProcess(evt){\r\n    self_gh.gp.cancelJob(self_gh.jobId, function (info) {\r\n      // self_gh.containerMessagesProgressGhAp.innerHTML = info.jobStatus;\r\n      // self_gh._dissabledButon(false)\r\n      // self_gh._progressBarStatus(false);\r\n    });\r\n  },\r\n\r\n\r\n\r\n  onOpen() {\r\n    console.log('mapGeologicalHazards_gh::onOpen');\r\n    this._createToolbar();\r\n    dojo.query(\".btnPolygonGraphGhCls\").on('click', this._activateTool);\r\n    dojo.query(\".btnRemoveGraphGhCls\").on('click', this._removeAllGrapics);\r\n    dojo.query('.inputUploadZipGhCls').on('change', this._uploadShapefile);\r\n    dojo.query('.rbtnGhCls').on('click', this._checkRadioButton)\r\n    dojo.query('.selectStakeholderGhCls').on('change', this._selectedStakeholder)\r\n    dojo.query('.btnRunProcessGhCls').on('click', this._executeGPService)\r\n    dojo.query('.btnCancelProcessGhCls').on('click', this._cancelProcess)\r\n    dom.byId(\"rbtnSmmGhId\").click();\r\n    self_gh.stakeHolder = self_gh.selectStakeholderGhAp.selectedOptions[0].innerHTML\r\n    dojo.byId(\"btnCancelProcessGhId\").disabled = true;\r\n\r\n    let panel = this.getPanel();    \r\n    // panel.position.width = 600; \r\n    panel.position.height = 650; \r\n    panel.setPosition(panel.position);        \r\n    panel.panelManager.normalizePanel(panel);  \r\n    // dom.byId(\"rbtnSmmGhId\").checked = true;\r\n  },\r\n  // onClose(){\r\n  //   console.log('mapGeologicalHazards_gh::onClose');\r\n  // },\r\n  // onMinimize(){\r\n  //   console.log('mapGeologicalHazards_gh::onMinimize');\r\n  // },\r\n  // onMaximize(){\r\n  //   console.log('mapGeologicalHazards_gh::onMaximize');\r\n  // },\r\n  // onSignIn(credential){\r\n  //   console.log('mapGeologicalHazards_gh::onSignIn', credential);\r\n  // },\r\n  // onSignOut(){\r\n  //   console.log('mapGeologicalHazards_gh::onSignOut');\r\n  // }\r\n  // onPositionChange(){\r\n  //   console.log('mapGeologicalHazards_gh::onPositionChange');\r\n  // },\r\n  // resize(){\r\n  //   console.log('mapGeologicalHazards_gh::resize');\r\n  // }\r\n});\r\n"]}